<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Transaction>
 */
class TransactionFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'amount' => $this->faker->randomFloat(2, 10, 1000),
            'type' => $this->faker->randomElement(['income', 'expense', 'transfer']),
            'description' => $this->faker->sentence(3),
            'date' => $this->faker->dateTimeBetween('-1 year', 'now')->format('Y-m-d'),
            'category_id' => null, // Will be set by test or state
            'wallet_id' => null, // Will be set by test or state
            'from_wallet_id' => null,
            'to_wallet_id' => null,
            'reference' => null, // Auto-generated by model
            'tags' => $this->faker->optional()->randomElements(['food', 'transport', 'entertainment', 'bills', 'shopping'], 2),
            'receipt' => null,
            'notes' => $this->faker->optional()->sentence(),
            'is_recurring' => false,
            'recurring_frequency' => null,
            'next_occurrence' => null,
            'parent_transaction_id' => null,
        ];
    }

    /**
     * Indicate that the transaction is an income.
     */
    public function income(): static
    {
        return $this->state(fn(array $attributes) => [
            'type' => 'income',
        ]);
    }

    /**
     * Indicate that the transaction is an expense.
     */
    public function expense(): static
    {
        return $this->state(fn(array $attributes) => [
            'type' => 'expense',
        ]);
    }

    /**
     * Indicate that the transaction is a transfer.
     */
    public function transfer(): static
    {
        return $this->state(fn(array $attributes) => [
            'type' => 'transfer',
            'category_id' => null, // Transfers don't use categories
        ]);
    }

    /**
     * Indicate that the transaction is recurring.
     */
    public function recurring(): static
    {
        return $this->state(fn(array $attributes) => [
            'is_recurring' => true,
            'recurring_frequency' => $this->faker->randomElement(['daily', 'weekly', 'monthly', 'yearly']),
            'next_occurrence' => $this->faker->dateTimeBetween('now', '+1 month')->format('Y-m-d'),
        ]);
    }

    /**
     * Set a specific amount.
     */
    public function withAmount(float $amount): static
    {
        return $this->state(fn(array $attributes) => [
            'amount' => $amount,
        ]);
    }

    /**
     * Set a specific date.
     */
    public function withDate(string $date): static
    {
        return $this->state(fn(array $attributes) => [
            'date' => $date,
        ]);
    }
}
